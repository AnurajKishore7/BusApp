1. Database design
2. Create Models
3. Create DbContext
	-- DbSet
	-- ORM & Seeding
	-- Set Connection string in appsettings.json
	-- Register DbContext in Program.cs
4. Create Repositories
	-- Interfaces & implementations using DbContext
	-- Return tasks
	-- Register repositories in Program.cs
5. Create DTOs
	-- Request & response for API calls
6. Create Services
	-- Interfaces & implementations
	-- Inherit IServics & use IRepo
	-- return Task
	-- Register services in Program.cs
7. Create Controllers
	-- implement APIs using IService
	-- Add RBAC
	 

Note: "Install required packages"

Configure JWT settings in appsettings.json.
Register JWT Authentication in Program.cs.




// Helper: Create password hash
private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
{
    using (var hmac = new HMACSHA512())
    {
        passwordSalt = hmac.Key;
        passwordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password));
    }
}

// Helper: Verify password hash
private bool VerifyPasswordHash(string password, byte[] storedHash, byte[] storedSalt)
{
    using (var hmac = new HMACSHA512(storedSalt))
    {
        var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password));
        return computedHash.SequenceEqual(storedHash);
    }
}

// Login user and generate JWT token
public async Task<string> Login(UserLoginDto request)
{
    var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == request.Email);
    if (user == null || user.IsDeleted)
        throw new Exception("Invalid email or password.");

    if (!VerifyPasswordHash(request.Password, user.PasswordHash, user.PasswordSalt))
        throw new Exception("Invalid email or password.");

    if (!user.IsApproved)
        throw new Exception("User is not approved by admin.");

    // Generate JWT Token
    return GenerateJwtToken(user);
}

private string GenerateJwtToken(User user)
{
    // Get the JWT secret key from app settings
    var secretKey = _configuration["Jwt:Secret"];
    if (string.IsNullOrEmpty(secretKey))
    {
        throw new Exception("JWT secret key is missing in configuration.");
    }

    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));
    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

    var claims = new List<Claim>
{
    new Claim(ClaimTypes.NameIdentifier, user.Email), // Email as primary key
    new Claim(ClaimTypes.Email, user.Email),
    new Claim(ClaimTypes.Role, user.Role)
};

    var token = new JwtSecurityToken(
        expires: DateTime.Now.AddDays(7), // Token expiration time
        signingCredentials: credentials,
        claims: claims
    );

    return new JwtSecurityTokenHandler().WriteToken(token);
}

private string GenerateJwtToken(User user)
{
    // Get the JWT secret key from app settings
    var secretKey = _configuration["Jwt:Secret"];
    if (string.IsNullOrEmpty(secretKey))
    {
        throw new Exception("JWT secret key is missing in configuration.");
    }

    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey));
    var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

    var claims = new List<Claim>
{
    new Claim(ClaimTypes.NameIdentifier, user.Email), // Email as primary key
    new Claim(ClaimTypes.Email, user.Email),
    new Claim(ClaimTypes.Role, user.Role)
};

    var token = new JwtSecurityToken(
        expires: DateTime.Now.AddDays(7), // Token expiration time
        signingCredentials: credentials,
        claims: claims
    );

    return new JwtSecurityTokenHandler().WriteToken(token);
}



 
