// <auto-generated />
using System;
using BusApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JourneyDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TripId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BusType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusRoutes");
                });

            modelBuilder.Entity("BusApp.Models.BusSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BusId", "SeatNumber")
                        .IsUnique();

                    b.ToTable("BusSeats");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHandicapped")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+911234567890",
                            DOB = new DateOnly(2002, 7, 11),
                            Email = "anuraj@gmail.com",
                            Gender = "Male",
                            IsDeleted = false,
                            IsHandicapped = false,
                            Name = "Anuraj"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsHandicapped")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("TransportOperators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contact = "+919876543210",
                            Email = "smartbus@gmail.com",
                            IsDeleted = false,
                            Name = "SmartBus"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("BusRouteId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusRouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@gmail.com",
                            CreatedAt = new DateTime(2025, 3, 5, 14, 41, 16, 669, DateTimeKind.Local).AddTicks(3084),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Super Admin",
                            PasswordHash = new byte[] { 116, 88, 87, 25, 97, 134, 104, 24, 17, 3, 51, 58, 104, 67, 124, 92, 240, 128, 81, 64, 69, 159, 129, 206, 224, 144, 52, 45, 186, 35, 142, 18, 171, 73, 169, 70, 89, 50, 32, 117, 96, 182, 178, 250, 129, 69, 68, 81, 38, 129, 127, 48, 27, 76, 209, 209, 108, 31, 194, 158, 100, 17, 37, 42 },
                            PasswordSalt = new byte[] { 221, 8, 42, 12, 46, 239, 136, 251, 113, 220, 75, 227, 81, 108, 119, 93, 28, 162, 226, 118, 75, 112, 21, 132, 55, 41, 188, 126, 160, 61, 216, 182, 195, 145, 254, 84, 10, 130, 70, 189, 108, 167, 96, 181, 240, 88, 94, 222, 43, 229, 19, 84, 169, 162, 147, 39, 135, 99, 29, 164, 40, 94, 165, 154, 175, 227, 123, 95, 255, 200, 135, 39, 149, 139, 217, 16, 188, 221, 192, 216, 82, 148, 29, 218, 140, 32, 234, 205, 73, 136, 201, 214, 230, 241, 77, 42, 252, 18, 41, 186, 32, 40, 212, 254, 198, 208, 18, 183, 148, 137, 117, 9, 235, 26, 43, 7, 119, 127, 42, 2, 130, 127, 40, 210, 222, 233, 239, 206 },
                            Role = "Admin"
                        },
                        new
                        {
                            Email = "anuraj@gmail.com",
                            CreatedAt = new DateTime(2025, 3, 5, 14, 41, 16, 669, DateTimeKind.Local).AddTicks(3087),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Anuraj",
                            PasswordHash = new byte[] { 43, 62, 56, 214, 243, 254, 242, 231, 84, 35, 200, 31, 199, 45, 149, 202, 128, 188, 28, 214, 7, 249, 117, 66, 165, 133, 135, 252, 89, 87, 200, 162, 206, 172, 22, 128, 51, 20, 224, 172, 13, 98, 3, 168, 244, 95, 135, 234, 84, 170, 141, 7, 149, 237, 183, 106, 71, 120, 105, 45, 222, 191, 103, 39 },
                            PasswordSalt = new byte[] { 15, 94, 156, 47, 13, 224, 22, 113, 38, 44, 57, 114, 23, 57, 194, 184, 120, 56, 174, 193, 103, 35, 51, 140, 29, 83, 90, 171, 2, 46, 128, 192, 75, 32, 225, 87, 155, 74, 218, 211, 97, 136, 206, 113, 61, 152, 186, 245, 171, 199, 103, 249, 207, 160, 141, 145, 214, 207, 211, 64, 29, 122, 206, 32, 80, 96, 105, 168, 89, 139, 175, 91, 33, 214, 25, 239, 47, 207, 155, 198, 1, 174, 40, 48, 209, 183, 181, 230, 144, 123, 210, 160, 40, 42, 158, 168, 55, 176, 248, 236, 160, 16, 210, 56, 252, 95, 128, 21, 90, 150, 152, 15, 209, 59, 115, 233, 190, 241, 252, 9, 217, 181, 121, 41, 63, 223, 183, 150 },
                            Role = "Client"
                        },
                        new
                        {
                            Email = "smartbus@gmail.com",
                            CreatedAt = new DateTime(2025, 3, 5, 14, 41, 16, 669, DateTimeKind.Local).AddTicks(3089),
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "SmartBus",
                            PasswordHash = new byte[] { 176, 74, 239, 75, 170, 167, 115, 2, 186, 234, 134, 116, 165, 244, 249, 40, 46, 160, 104, 49, 25, 82, 80, 215, 80, 230, 127, 21, 250, 5, 202, 193, 57, 122, 147, 55, 123, 196, 58, 75, 248, 16, 102, 99, 5, 21, 245, 30, 63, 193, 3, 169, 118, 33, 128, 92, 149, 231, 79, 225, 201, 2, 99, 164 },
                            PasswordSalt = new byte[] { 220, 169, 31, 19, 174, 68, 113, 76, 135, 243, 100, 247, 88, 26, 154, 14, 157, 80, 102, 94, 254, 165, 145, 58, 18, 39, 26, 154, 169, 205, 93, 144, 158, 66, 76, 185, 155, 48, 177, 187, 237, 140, 0, 161, 173, 111, 180, 239, 107, 152, 154, 80, 139, 110, 129, 129, 35, 234, 175, 63, 73, 51, 137, 13, 183, 50, 161, 126, 126, 106, 176, 122, 47, 142, 113, 174, 18, 245, 80, 69, 176, 153, 159, 114, 31, 147, 119, 239, 164, 67, 41, 97, 208, 130, 240, 39, 154, 76, 148, 67, 241, 110, 207, 2, 105, 69, 135, 78, 86, 179, 49, 71, 232, 15, 229, 54, 176, 79, 209, 194, 184, 11, 196, 228, 237, 142, 119, 76 },
                            Role = "TransportOperator"
                        });
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.HasOne("BusApp.Models.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusApp.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.HasOne("BusApp.Models.TransportOperator", "TransportOperator")
                        .WithMany("Buses")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportOperator");
                });

            modelBuilder.Entity("BusApp.Models.BusSeat", b =>
                {
                    b.HasOne("BusApp.Models.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("BusApp.Models.Client", "Email")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Payment", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("BusApp.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TicketPassenger", b =>
                {
                    b.HasOne("BusApp.Models.Booking", "Booking")
                        .WithMany("TicketPassengers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.HasOne("BusApp.Models.User", "User")
                        .WithOne("TransportOperator")
                        .HasForeignKey("BusApp.Models.TransportOperator", "Email")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.HasOne("BusApp.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusApp.Models.BusRoute", "BusRoute")
                        .WithMany("Trips")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("BusApp.Models.Booking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("TicketPassengers");
                });

            modelBuilder.Entity("BusApp.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.BusRoute", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusApp.Models.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.TransportOperator", b =>
                {
                    b.Navigation("Buses");
                });

            modelBuilder.Entity("BusApp.Models.Trip", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BusApp.Models.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("TransportOperator");
                });
#pragma warning restore 612, 618
        }
    }
}
